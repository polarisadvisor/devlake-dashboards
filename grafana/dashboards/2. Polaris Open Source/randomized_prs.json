{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": false,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 49,
  "links": [],
  "panels": [
    {
      "datasource": {
        "default": false,
        "type": "mysql",
        "uid": "mysql"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "points",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "cycle_time"
            },
            "properties": [
              {
                "id": "custom.pointSize",
                "value": 14
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "residence_time"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "age"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "avg_cycle_time"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "avg_reisdence_time"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "avg_cycle_time"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "line"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "avg_residence_time"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "line"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "avg_age"
            },
            "properties": [
              {
                "id": "custom.drawStyle",
                "value": "line"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "red",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 18,
        "w": 15,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "dataset": "lake",
          "datasource": {
            "type": "mysql",
            "uid": "mysql"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH RECURSIVE synthetic_prs AS (\n    -- Base case: First PR\n    SELECT \n        1 AS id, \n        $__timeFrom() AS base_date, \n        RAND() AS rand_created_offset, \n        RAND() AS rand_merge_offset\n    UNION ALL\n    -- Recursive case: Generate the next PR\n    SELECT \n        id + 1, \n        $__timeFrom(), \n        RAND(), \n        RAND()\n    FROM synthetic_prs\n    WHERE id < ${N} -- Generate exactly N PRs\n),\n\nprs_with_dates AS (\n    -- Generate `created_date` and `merged_date`\n    SELECT \n        id, \n        -- Random `created_date` within the observation window\n        $__timeFrom() + INTERVAL FLOOR(rand_created_offset * TIMESTAMPDIFF(SECOND, $__timeFrom(), $__timeTo())) SECOND AS created_date,\n        \n        -- Ensure `merged_date` is after `created_date`\n        $__timeFrom() + INTERVAL FLOOR(rand_created_offset * TIMESTAMPDIFF(SECOND, $__timeFrom(), $__timeTo())) SECOND\n                   + INTERVAL rand_merge_offset * ${MAX_CYCLE_TIME} ${UNIT} AS merged_date\n    FROM synthetic_prs\n),\n\ncf AS (\n    -- Conversion factor table for different time units\n    SELECT 'SECOND' AS unit, 1 AS factor UNION ALL\n    SELECT 'MINUTE', 60 UNION ALL\n    SELECT 'HOUR', 3600 UNION ALL\n    SELECT 'DAY', 86400 UNION ALL\n    SELECT 'WEEK', 604800 UNION ALL\n    SELECT 'MONTH', 2592000\n),\n\nobservation_windows AS (\n    -- Generate bins of length `WINDOW UNITS` within the observation window\n    SELECT \n        $__timeFrom() AS window_start,\n        TIMESTAMPADD(${UNIT}, ${WINDOW}, $__timeFrom()) AS window_end\n    UNION ALL\n    SELECT \n        TIMESTAMPADD(${UNIT}, ${WINDOW}, window_start),\n        TIMESTAMPADD(${UNIT}, ${WINDOW}, window_end)\n    FROM observation_windows\n    WHERE window_end < $__timeTo()\n),\n\nprs_with_metrics AS (\n    -- Compute residence time and cycle time for each PR in each observation window\n    SELECT \n        pr.created_date,\n        pr.merged_date,\n        ow.window_start,\n        ow.window_end,\n        pr.id,\n        cf.factor,\n        CASE \n            WHEN pr.merged_date BETWEEN ow.window_start AND ow.window_end THEN pr.merged_date\n            ELSE ow.window_end\n        END as ref_date,\n        -- Residence time: How long the PR was active in the window\n        CASE \n            WHEN pr.created_date >= ow.window_start AND pr.merged_date <= ow.window_end \n                THEN TIMESTAMPDIFF(SECOND, pr.created_date, pr.merged_date) \n            WHEN pr.created_date < ow.window_start AND pr.merged_date > ow.window_end \n                THEN TIMESTAMPDIFF(SECOND, ow.window_start, ow.window_end) \n            WHEN pr.created_date < ow.window_start AND pr.merged_date <= ow.window_end \n                THEN TIMESTAMPDIFF(SECOND, ow.window_start, pr.merged_date) \n            WHEN pr.merged_date IS NULL OR pr.merged_date > ow.window_end\n                THEN TIMESTAMPDIFF(SECOND, GREATEST(pr.created_date, ow.window_start), ow.window_end) \n        END / cf.factor AS residence_time,\n\n        -- Cycle time: Only for PRs that merged within the window\n        CASE \n            WHEN pr.merged_date BETWEEN ow.window_start AND ow.window_end \n                THEN TIMESTAMPDIFF(SECOND, pr.created_date, pr.merged_date) \n            ELSE NULL\n        END / cf.factor AS cycle_time,\n\n        -- Age of PRs: Only for PRs that remain open in the bin\n        CASE \n            WHEN pr.merged_date IS NULL OR pr.merged_date > ow.window_end \n                THEN TIMESTAMPDIFF(SECOND, pr.created_date, ow.window_end) \n            ELSE NULL\n        END / cf.factor AS age\n\n    FROM prs_with_dates pr\n    JOIN observation_windows ow \n        ON pr.created_date <= ow.window_end \n        AND (pr.merged_date IS NULL OR pr.merged_date >= ow.window_start)\n    JOIN cf \n        ON cf.unit = '${UNIT}' -- Convert times to the selected UNIT\n)\n\n-- Final aggregated results for Grafana\nSELECT \n   ref_date,\n   created_date,\n   merged_date,\n   window_start,\n   window_end,\n   cycle_time,\n   residence_time,\n   age\nFROM prs_with_metrics\n\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "dataset": "lake",
          "datasource": {
            "type": "mysql",
            "uid": "mysql"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH RECURSIVE synthetic_prs AS (\n    -- Base case: First PR\n    SELECT \n        1 AS id, \n        $__timeFrom() AS base_date, \n        RAND() AS rand_created_offset, \n        RAND() AS rand_merge_offset\n    UNION ALL\n    -- Recursive case: Generate the next PR\n    SELECT \n        id + 1, \n        $__timeFrom(), \n        RAND(), \n        RAND()\n    FROM synthetic_prs\n    WHERE id < ${N} -- Generate exactly N PRs\n),\n\nprs_with_dates AS (\n    -- Generate `created_date` and `merged_date`\n    SELECT \n        id, \n        -- Random `created_date` within the observation window\n        $__timeFrom() + INTERVAL FLOOR(rand_created_offset * TIMESTAMPDIFF(SECOND, $__timeFrom(), $__timeTo())) SECOND AS created_date,\n        \n        -- Ensure `merged_date` is after `created_date`\n        $__timeFrom() + INTERVAL FLOOR(rand_created_offset * TIMESTAMPDIFF(SECOND, $__timeFrom(), $__timeTo())) SECOND\n                   + INTERVAL rand_merge_offset * ${MAX_CYCLE_TIME} ${UNIT} AS merged_date\n    FROM synthetic_prs\n),\n\ncf AS (\n    -- Conversion factor table for different time units\n    SELECT 'SECOND' AS unit, 1 AS factor UNION ALL\n    SELECT 'MINUTE', 60 UNION ALL\n    SELECT 'HOUR', 3600 UNION ALL\n    SELECT 'DAY', 86400 UNION ALL\n    SELECT 'WEEK', 604800 UNION ALL\n    SELECT 'MONTH', 2592000\n),\n\nobservation_windows AS (\n    -- Generate bins of length `WINDOW UNITS` within the observation window\n    SELECT \n        $__timeFrom() AS window_start,\n        TIMESTAMPADD(${UNIT}, ${WINDOW}, $__timeFrom()) AS window_end\n    UNION ALL\n    SELECT \n        TIMESTAMPADD(${UNIT}, ${WINDOW}, window_start),\n        TIMESTAMPADD(${UNIT}, ${WINDOW}, window_end)\n    FROM observation_windows\n    WHERE window_end < $__timeTo()\n),\n\nprs_with_metrics AS (\n    -- Compute residence time and cycle time for each PR in each observation window\n    SELECT \n        pr.created_date,\n        pr.merged_date,\n        ow.window_start,\n        ow.window_end,\n        pr.id,\n        cf.factor,\n        CASE \n            WHEN pr.merged_date BETWEEN ow.window_start AND ow.window_end THEN pr.merged_date\n            ELSE ow.window_end\n        END as ref_date,\n        -- Residence time: How long the PR was active in the window\n        CASE \n            WHEN pr.created_date >= ow.window_start AND pr.merged_date <= ow.window_end \n                THEN TIMESTAMPDIFF(SECOND, pr.created_date, pr.merged_date) \n            WHEN pr.created_date < ow.window_start AND pr.merged_date > ow.window_end \n                THEN TIMESTAMPDIFF(SECOND, ow.window_start, ow.window_end) \n            WHEN pr.created_date < ow.window_start AND pr.merged_date <= ow.window_end \n                THEN TIMESTAMPDIFF(SECOND, ow.window_start, pr.merged_date) \n            WHEN pr.merged_date IS NULL OR pr.merged_date > ow.window_end\n                THEN TIMESTAMPDIFF(SECOND, GREATEST(pr.created_date, ow.window_start), ow.window_end) \n        END / cf.factor AS residence_time,\n\n        -- Cycle time: Only for PRs that merged within the window\n        CASE \n            WHEN pr.merged_date BETWEEN ow.window_start AND ow.window_end \n                THEN TIMESTAMPDIFF(SECOND, pr.created_date, pr.merged_date) \n            ELSE NULL\n        END / cf.factor AS cycle_time,\n\n        -- Age of PRs: Only for PRs that remain open in the bin\n        CASE \n            WHEN pr.merged_date IS NULL OR pr.merged_date > ow.window_end \n                THEN TIMESTAMPDIFF(SECOND, pr.created_date, ow.window_end) \n            ELSE NULL\n        END / cf.factor AS age\n\n    FROM prs_with_dates pr\n    JOIN observation_windows ow \n        ON pr.created_date <= ow.window_end \n        AND (pr.merged_date IS NULL OR pr.merged_date >= ow.window_start)\n    JOIN cf \n        ON cf.unit = '${UNIT}' -- Convert times to the selected UNIT\n)\n\n-- Final aggregated results for Grafana\nSELECT \n   window_end as ref_date,\n   AVG(cycle_time) as avg_cycle_time,\n   AVG(age) as avg_age,\n   AVG(residence_time) as avg_residence_time\n   \nFROM prs_with_metrics\nGROUP BY window_start, window_end\n\n",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Panel Title",
      "type": "timeseries"
    }
  ],
  "refresh": "",
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "DAY",
          "value": "DAY"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Unit",
        "multi": false,
        "name": "UNIT",
        "options": [
          {
            "selected": false,
            "text": "HOUR",
            "value": "HOUR"
          },
          {
            "selected": true,
            "text": "DAY",
            "value": "DAY"
          },
          {
            "selected": false,
            "text": "WEEK",
            "value": "WEEK"
          },
          {
            "selected": false,
            "text": "MONTH",
            "value": "MONTH"
          },
          {
            "selected": false,
            "text": "QUARTER",
            "value": "QUARTER"
          },
          {
            "selected": false,
            "text": "YEAR",
            "value": "YEAR"
          }
        ],
        "query": "HOUR, DAY, WEEK, MONTH, QUARTER, YEAR",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "1",
          "value": "1"
        },
        "hide": 0,
        "label": "Observation Window",
        "name": "WINDOW",
        "options": [
          {
            "selected": true,
            "text": "1",
            "value": "1"
          }
        ],
        "query": "1",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": false,
          "text": "20",
          "value": "20"
        },
        "description": "Number of PRs to generate",
        "hide": 0,
        "label": "Number of PRs",
        "name": "N",
        "options": [
          {
            "selected": true,
            "text": "20",
            "value": "20"
          }
        ],
        "query": "20",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": false,
          "text": "1",
          "value": "1"
        },
        "description": "",
        "hide": 0,
        "label": "Max Cycle Time",
        "name": "MAX_CYCLE_TIME",
        "options": [
          {
            "selected": true,
            "text": "1",
            "value": "1"
          }
        ],
        "query": "1",
        "skipUrlSync": false,
        "type": "textbox"
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Randomized PRs",
  "uid": "randomized_prs",
  "version": 7,
  "weekStart": ""
}