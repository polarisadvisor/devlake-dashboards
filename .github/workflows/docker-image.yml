# CI/CD Pipeline for Dashboard Testing and Deployment
#
# This workflow automates the testing and deployment of the devlake-dashboards.
#
# **Workflow Overview:**
# 1. **Check Dependencies:** Detects if `poetry.lock` has changed. This triggers a build and push of the latest dashboard-testing base image.
# 2. **Build dashboard-testing Image (If Needed):** If `poetry.lock` changed, rebuilds and pushes `polarisadvisor/dashboard-testing`.
# 3. **Run Tests:** Always runs tests using the latest `dashboard-testing` image. It waits until the previous step completes in needed.
# 4. **Build & Push devlake-dashboards:** Only runs if tests succeed.
#
# **Key Design Decisions:**
# - `build-dashboard-testing` runs **only if `poetry.lock` changes**, preventing unnecessary builds.
# - `run-tests` **always runs**, even if `build-dashboard-testing` was skipped, ensuring tests validate the latest image.
# - `build-devlake-dashboards` only runs **if tests succeed** but **always evaluates its condition** using `always()`, preventing it from being skipped when `build-dashboard-testing` is skipped.
#
# This setup ensures that:
# - Images are only rebuilt when necessary.
# - Tests always run against the latest available image.
# - The final dashboard image is only pushed if tests pass.

name: CI/CD for Dashboard Testing
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ "main" ]
    paths:
      - "grafana/**"
      - ".github/**"
      - "dashboard-testing/**"

  pull_request:
    branches: [ "main" ]
    paths:
      - "grafana/**"
      - ".github/**"
      - "dashboard-testing/**"

jobs:

  check-dependencies:
    runs-on: ubuntu-latest
    outputs:
      poetry_lock_changed: ${{ steps.check_lock.outputs.changed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if poetry.lock has changed
        id: check_lock
        run: |
          if git diff --name-only HEAD^ HEAD | grep "dashboard-testing/poetry.lock"; then
            echo "poetry.lock changed, triggering build."
            echo "changed=true" >> $GITHUB_ENV
          else
            echo "poetry.lock unchanged, skipping build."
            echo "changed=false" >> $GITHUB_ENV
          fi

  build-dashboard-testing:
    runs-on: ubuntu-latest
    needs: check-dependencies
    if: needs.check-dependencies.outputs.poetry_lock_changed == 'true'  # Build only if poetry.lock changed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push dashboard-testing image
        run: |
          GIT_SHA=${{ github.sha }}
          docker buildx build ./dashboard-testing \
            --file dashboard-testing/docker/Dockerfile \
            --platform linux/amd64,linux/arm64 \
            --tag polarisadvisor/dashboard-testing:latest \
            --tag polarisadvisor/dashboard-testing:$GIT_SHA \
            --push

  run-tests:
    runs-on: ubuntu-latest
    needs: [check-dependencies, build-dashboard-testing]
    if: success() || needs.build-dashboard-testing.result == 'skipped'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pull the latest dashboard-testing image
        run: docker pull polarisadvisor/dashboard-testing:latest

      - name: Run tests
        run: docker compose -f dashboard-testing/docker-compose.yml up  --exit-code-from tests --abort-on-container-exit

      - name: Cleanup
        if: always()
        run: docker compose -f dashboard-testing/docker-compose.yml down  --volumes

  build-devlake-dashboards:
    runs-on: ubuntu-latest
    needs: run-tests  # Run only if tests pass
    if: always() && needs.run-tests.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push devlake-dashboards image
        run: |
          GIT_SHA=${{ github.sha }}
          docker buildx build grafana --file grafana/Dockerfile \
            --platform linux/amd64,linux/arm64 \
            --tag polarisadvisor/devlake-dashboards:latest \
            --tag polarisadvisor/devlake-dashboards:$GIT_SHA \
            --push
